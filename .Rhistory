tran <- matrix(c(0.1,0.2,0.3,0.4,0.4,0.15,0.35,0,1,0.25,0.3,0.2,0.25,0.45,0.35,0.15,0.05),4,4)
#(1)
a <- c(0.1,0.2,0.3,0.4)
b <- c(0.4,0.15,0.35,0.1)
c <- c(0.25,0.3,0.2,0.25)
d <- c(0.45,0.35,0.1,0.05)
tran <- rind(a,b,c,d)
a <- c(0.1,0.2,0.3,0.4)
b <- c(0.4,0.15,0.35,0.1)
c <- c(0.25,0.3,0.2,0.25)
d <- c(0.45,0.35,0.1,0.05)
tran <- rbind(a,b,c,d)
tran
tran[3,3]
tran[1,4]
q()
a <- sqrt(4)
a
a <- sqrt((0.6/300)-(0.6^2/300)+(0.84^2/360000))
b <- 0.84*a
u <- 0.6 + (0.84^2/600)
bm <- 1+(0.84^2/300)
(u+b)/bm
(u-b)/bm
uu <- 0.6 + (1.28^2/600)
bb <- 1.28*sqrt((0.6/300)-(0.6^2/300)+(1.28^2/360000))
bmm <- 1 + (1.28^2/300)
(uu+bb)/bm
(uu+bb)/bm
(uu+bb)/bmm
(uu-bb)/bmm
170/300
m <- 0.57 + (0.84^2/600)
mm <- 0.84*sqrt((0.57/300)-(0.57^2/300)+(0.84^2/360000))
mmm <- 1 + (0.84^2/300)
(m+mm)/mmm
(m-mm)/mmm
w <- 0.57+(1.28^2/600)
ww <- 1.28*sqrt((0.57/300)-(0.57^2/300)+(1.28^2/360000))
www <- 1+ (1.28^2/300)
(w+ww)/www
(w-ww)/www
a <- 0.5+(1.65^2/2000)
b <- 1.65*sqrt(0.5/1000-(0.5^2/1000)+(1.65^2/4000000))
c <- 1 + (1.65^2/1000)
(a+b)/c
(a-b)/c
require(xgboost)
install.packages("xgboost")
y <- rnorm( 5 )
x <- rnorm( 5 )
library(broom)
fit <- lm( y~x )
tidy( fit ) #gives you a data.frame representation
glance( fit ) #summary statistics computed for the entire regression
augment( fit )  #fitted results, residuals
abs(1-2)
max(c(2,3))
winnerFn <- function(andy, roger, winBy, winningScore){
#winByis the number of points one player has over the other to win
#winningScore is the number of points a player needs to win
if((sum(c(andy, roger)>=winningScore)>0)&&(abs(andy-roger)>=winBy)){
return(ifelse(andy>roger,"a", "r"))
}
return("nobody")
}
winnerFn(5,3,2,4)
winnerFn(3,1,2,4)
winnerFn(4,4,2,4)
winnerFn(1,4,2,3)
winnerFn(1,4,2,4)
sample(c("a","b"),4)
sample(c("a","b"),4,replace = T)
average(c(TRUE,FALSE))
mean(c(TRUE,FALSE,TRUE,TRUE,FALSE))
s <- sample(c("r","a"), 4, replace = T, prob = c(0.6, 1-0.6))
sum(s[s=="r"])
s[s=="r"]
count(s[s=="r"])
s[which(s=="r")]
library(tidyverse)
count(s[s=="r"])
sum(s=="r")
sum(s=="a")
a <- "3"
a != "2"
pRogerPoint = 0.6
runningScoreFn = function(pointHistory){
playerUni = sort(unique(pointHistory))
cols = sapply(playerUni, function(thisPlayer){
cumsum(pointHistory == thisPlayer)
})
names(cols) = playerUni
cbind(pointHistory, as.data.frame(cols))
}
pointHistory = c("r", "r", "a", "r", "a", "r")
runningScoreFn(pointHistory)
winnerFn <- function(andy, roger, winBy, winningScore){
#winByis the number of points one player has over the other to win
#winningScore is the number of points a player needs to win
if((sum(c(andy, roger)>=winningScore)>0)&&(abs(andy-roger)>=winBy)){
return(ifelse(andy>roger,"a", "r"))
}
return("nobody")
}
rogerWinsGameFn <- function(pRogerPoint){
#returns TRUE if Roger wins
result <- "nobody"
p <- NULL
while(result == "nobody"){
p <- c(p, sample(c("r","a"), 1, replace = T, prob = c(pRogerPoint, 1-pRogerPoint)))
a <- sum(p=="a")
r <- sum(p=="r")
result <- winnerFn(a, r, 2, 4)
}
#print(c(a,r,p))
return(ifelse(a>r,FALSE, TRUE))
}
i1 <- 1
pa <- rep(FALSE,10000)
repeat{
if(i1>10000){break}
pa[i1] <- rogerWinsGameFn(pRogerPoint)
i1 <- i1 + 1
}
pRogerGame <- mean(pa)
pRogerGame
whoWinsGameFn <- function(pRogerPoint, winBy, winningScore){
result <- "nobody"
p <- NULL
while(result == "nobody"){
p <- c(p, sample(c("r","a"), 1, replace = T, prob = c(pRogerPoint, 1-pRogerPoint)))
a <- sum(p=="a")
r <- sum(p=="r")
if((sum(c(a, r)>=winningScore)>0)&&(abs(a-r)>=winBy)){
result <- ifelse(a > r,"a", "r")
}
}
rlist <- list(runningScore = runningScoreFn(p), winner = result)
return(rlist)
}
rogerWinsSetFn <- function(pRogerGame){
return(whoWinsGameFn(pRogerGame, 2, 6))
}
rogerWinsSetFn(pRogerGame)
i2 <- 1
pb <- rep(NA,10000)
repeat{
if(i2>10000){break}
pb[i2] <- rogerWinsSetFn(pRogerGame)$winner
i2 <- i2 + 1
}
pRogerSet <- mean(pb=="r")
pRogerSet
rogerWinsMatchFn <- function(pRogerSet){
return(whoWinsGameFn(pRogerSet, 0, 3))
}
rogerWinsMatchFn(pRogerSet)
i3 <- 1
pc <- rep(NA,10000)
repeat{
if(i3>10000){break}
pc[i3] <- rogerWinsMatchFn(pRogerSet)$winner
i3 <- i3 + 1
}
pRogerMatch <- mean(pc=="r")
pRogerMatch
pRogerPoint = 0.6
runningScoreFn = function(pointHistory){
playerUni = sort(unique(pointHistory))
cols = sapply(playerUni, function(thisPlayer){
cumsum(pointHistory == thisPlayer)
})
names(cols) = playerUni
cbind(pointHistory, as.data.frame(cols))
}
pointHistory = c("r", "r", "a", "r", "a", "r")
runningScoreFn(pointHistory)
winnerFn <- function(andy, roger, winBy, winningScore){
#winByis the number of points one player has over the other to win
#winningScore is the number of points a player needs to win
if((sum(c(andy, roger)>=winningScore)>0)&&(abs(andy-roger)>=winBy)){
return(ifelse(andy>roger,"a", "r"))
}
return("nobody")
}
rogerWinsGameFn <- function(pRogerPoint){
#returns TRUE if Roger wins
result <- "nobody"
p <- NULL
while(result == "nobody"){
p <- c(p, sample(c("r","a"), 1, replace = T, prob = c(pRogerPoint, 1-pRogerPoint)))
a <- sum(p=="a")
r <- sum(p=="r")
result <- winnerFn(a, r, 2, 4)
}
#print(c(a,r,p))
return(ifelse(a>r,FALSE, TRUE))
}
i1 <- 1
pa <- rep(FALSE,10000)
repeat{
if(i1>10000){break}
pa[i1] <- rogerWinsGameFn(pRogerPoint)
i1 <- i1 + 1
}
pRogerGame <- mean(pa)
pRogerGame
whoWinsGameFn <- function(pRogerPoint, winBy, winningScore){
result <- "nobody"
p <- NULL
while(result == "nobody"){
p <- c(p, sample(c("r","a"), 1, replace = T, prob = c(pRogerPoint, 1-pRogerPoint)))
a <- sum(p=="a")
r <- sum(p=="r")
if((sum(c(a, r)>=winningScore)>0)&&(abs(a-r)>=winBy)){
result <- ifelse(a > r,"a", "r")
}
}
rlist <- list(runningScore = runningScoreFn(p), winner = result)
return(rlist)
}
rogerWinsSetFn <- function(pRogerGame){
return(whoWinsGameFn(pRogerGame, 2, 6))
}
rogerWinsSetFn(pRogerGame)
i2 <- 1
pb <- rep(NA,10000)
repeat{
if(i2>10000){break}
pb[i2] <- rogerWinsSetFn(pRogerGame)$winner
i2 <- i2 + 1
}
pRogerSet <- mean(pb=="r")
pRogerSet
rogerWinsMatchFn <- function(pRogerSet){
return(whoWinsGameFn(pRogerSet, 0, 3))
}
rogerWinsMatchFn(pRogerSet)
i3 <- 1
pc <- rep(NA,10000)
repeat{
if(i3>10000){break}
pc[i3] <- rogerWinsMatchFn(pRogerSet)$winner
i3 <- i3 + 1
}
pRogerMatch <- mean(pc=="r")
pRogerMatch
c(pRogerGame, pRogerSet, pRogerMatch)
c(A=pRogerGame, B=pRogerSet, C=pRogerMatch)
pRogerPoint = 0.6
runningScoreFn = function(pointHistory){
playerUni = sort(unique(pointHistory))
cols = sapply(playerUni, function(thisPlayer){
cumsum(pointHistory == thisPlayer)
})
names(cols) = playerUni
cbind(pointHistory, as.data.frame(cols))
}
pointHistory = c("r", "r", "a", "r", "a", "r")
runningScoreFn(pointHistory)
winnerFn <- function(andy, roger, winBy, winningScore){
#winByis the number of points one player has over the other to win
#winningScore is the number of points a player needs to win
if((sum(c(andy, roger)>=winningScore)>0)&&(abs(andy-roger)>=winBy)){
return(ifelse(andy>roger,"a", "r"))
}
return("nobody")
}
rogerWinsGameFn <- function(pRogerPoint){
#returns TRUE if Roger wins
result <- "nobody"
p <- NULL
while(result == "nobody"){
p <- c(p, sample(c("r","a"), 1, replace = T, prob = c(pRogerPoint, 1-pRogerPoint)))
a <- sum(p=="a")
r <- sum(p=="r")
result <- winnerFn(a, r, 2, 4)
}
#print(c(a,r,p))
return(ifelse(a>r,FALSE, TRUE))
}
i1 <- 1
pa <- rep(FALSE,10000)
repeat{
if(i1>10000){break}
pa[i1] <- rogerWinsGameFn(pRogerPoint)
i1 <- i1 + 1
}
pRogerGame <- mean(pa)
pRogerGame
whoWinsGameFn <- function(pRogerPoint, winBy, winningScore){
result <- "nobody"
p <- NULL
while(result == "nobody"){
p <- c(p, sample(c("r","a"), 1, replace = T, prob = c(pRogerPoint, 1-pRogerPoint)))
a <- sum(p=="a")
r <- sum(p=="r")
if((sum(c(a, r)>=winningScore)>0)&&(abs(a-r)>=winBy)){
result <- ifelse(a > r,"a", "r")
}
}
rlist <- list(runningScore = runningScoreFn(p), winner = result)
return(rlist)
}
rogerWinsSetFn <- function(pRogerGame){
return(whoWinsGameFn(pRogerGame, 2, 6))
}
rogerWinsSetFn(pRogerGame)
i2 <- 1
pb <- rep(NA,10000)
repeat{
if(i2>10000){break}
pb[i2] <- rogerWinsSetFn(pRogerGame)$winner
i2 <- i2 + 1
}
pRogerSet <- mean(pb=="r")
pRogerSet
rogerWinsMatchFn <- function(pRogerSet){
return(whoWinsGameFn(pRogerSet, 0, 3))
}
rogerWinsMatchFn(pRogerSet)
i3 <- 1
pc <- rep(NA,10000)
repeat{
if(i3>10000){break}
pc[i3] <- rogerWinsMatchFn(pRogerSet)$winner
i3 <- i3 + 1
}
pRogerMatch <- mean(pc=="r")
pRogerMatch
c(A=pRogerGame, B=pRogerSet, C=pRogerMatch)
a <- 1:9
dim(a)
dim(a) <- c(3:3)
dim(a) <- c(3,3)
a
? dplyr
?? dplyr
a <- as.Date('2020/2/28')
b <- as.Date("2020/3/1")
b -a
a <- c(3,0,TRUE)
b <- c(4,0,FALSE)
a|b
type(14L)
typeof(13L)
a < NA
y <- a/1
y
a <- NA
a/2
a/1
a <- as.Date("2022-12-21")
attr(a)
month(a)
months(a)
a=c(16.52,6.12,0,6.6)
sqrt(sum(a^2))
16.52^2+6.12^2+6.6^2
sqrt(353.9248)
a/sqrt(sum(a^2))
b= c(2.95,30.6,16.8,0)
d=c(14.16,0,16.8,8.36)
b/sqrt(sum(b^2))
d/sqrt(sum(d^2))
idf = c(0.59,1.02,0.56,0.44)
idf/sqrt(sum(idf^2))
q = c(0.59,0,0.56,0.44)
a = c(0.88,0.33,0,0.35)
b = c(0.08,0.87,0.48,0)
d = c(0.6,0,0.71,0.36)
q*a
sum(q*a)
q*b
sum(q*b)
q*c
sum(q*c)
q*d
sum(q*d)
log10(1)
3/log2(2)
3+2/log2(3)
9+3/log2(3)
4+5/log2(5)
6.15+2/log2(7)
3/log2(10)
6.86+0.903
a <- c(6.15, 6.15, rep(6.86,3), 7.76)
a/11.89
library(tidyverse)
a <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
View(a)
#setwd("/home/loijilai/CS-hub/myR/time-series/time-series-final-project")
setwd("D:/WEN/1102course/Time Series Analysis/project/time-series-final-project")
# download from: https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series
library("dplyr")
library("tidyverse")
library("astsa")
library("forecast")
library("tseries")
# Step 1. 讀取資料
covid <- read_csv("time_series_covid19_confirmed_global.csv")[,c(-1:-4)]
covid_total <- apply(covid, 2, sum)
covid.ts <- ts(diff(covid_total)) # 建立每日確診數的時間數列
covid600.ts <- ts(diff(covid_total)[1:600])
plot(covid.ts)
plot(covid600.ts)
#if we check the small part of data
#we can find that it might have a weekly regular pattern (lag = 7)
plot(covid.ts[200:250], type = "b")
acf(covid.ts,120)
pacf(covid.ts)
#do seasonal differencing first
sd_covid.ts <- diff(covid.ts, 7)
plot(sd_covid.ts)
adf.test(sd_covid.ts) #p-value = 0.01, stationary
acf2(sd_covid.ts)#it seems need to take first difference
#first-difference
sdd_covid.ts <- diff(sd_covid.ts)
plot(sdd_covid.ts, type = "l")
acf2(sdd_covid.ts)
fit1 <- sarima(covid.ts, 0, 1, 1, 0, 1, 1, 7)
fit2 <- sarima(covid.ts, 2, 1, 1, 0, 1, 1, 7)
fit3 <- sarima(covid.ts, 2, 1, 1, 2, 1, 1, 7)
fit4 <- sarima(covid.ts, 0, 1, 1, 2, 1, 1, 7)
fit5 <- sarima(covid.ts, 2, 1, 1, 2, 1, 3, 7)
a <- arima(covid.ts,order=c(4,1,3))
a$aic
fit6 <- sarima(covid.ts, 2, 1, 3, 2, 1, 3, 7)
fit6$AIC
acf2(sdd_covid.ts)
fit5 <- sarima(covid.ts, 2, 1, 3, 2, 1, 1, 7)
fit5$AIC #26.00678
acf2(sdd_covid.ts)
fit1 <- sarima(covid.ts, 0, 1, 1, 0, 1, 1, 7)
fit2 <- sarima(covid.ts, 0, 1, 3, 0, 1, 1, 7)
fit1$AIC #26.07277
fit2$AIC #26.06502
fit3 <- sarima(covid.ts, 0, 1, 4, 0, 1, 1, 7)
fit3$AIC
fit4 <- sarima(covid.ts, 2, 1, 0, 0, 1, 1, 7)
fit4$AIC
fit4 <- sarima(covid.ts, 2, 1, 0, 0, 1, 1, 7)
fit4 <- sarima(covid.ts, 2, 1, 0, 0, 1, 1, 7)
fit3$AIC
fit4$AIC
fit5 <- sarima(covid.ts, 2, 1, 4, 0, 1, 1, 7)
fit5$AIC
fit5 <- sarima(covid.ts, 2, 1, 3, 0, 1, 1, 7)
fit5 <- sarima(covid.ts, 2, 1, 3, 0, 1, 1, 7)
fit5$AIC
fit5 <- sarima(covid.ts, 2, 1, 1, 0, 1, 1, 7)
fit5$AIC
fit5 <- sarima(covid.ts, 2, 1, 3, 0, 1, 1, 7)
fit5$AIC
fit5 <- sarima(covid.ts, 2, 1, 4, 0, 1, 1, 7)
fit5$AIC
fit6 <- sarima(covid.ts, 2, 1, 4, 2, 1, 1, 7)
fit6$AIC
fit7 <- sarima(covid.ts, 2, 1, 3, 2, 1, 1, 7)
fit7$AIC
fit8 <- sarima(covid.ts, 0, 1, 3, 2, 1, 1, 7)
fit8$AIC
fit8 <- sarima(covid.ts, 2, 1, 1, 2, 1, 1, 7)
fit8$AIC
fit8 <- sarima(covid.ts, 0, 1, 1, 2, 1, 1, 7)
fit8$AIC
fit8 <- sarima(covid.ts, 2, 1, 0, 2, 1, 1, 7)
fit8$AIC
fit8 <- sarima(covid.ts, 2, 1, 1, 2, 1, 1, 7)
fit8$AIC
fit8 <- sarima(covid.ts, 0, 1, 3, 2, 1, 1, 7)
fit4$AIC #26.06524
fit8 <- sarima(covid.ts, 2, 1, 1, 2, 1, 1, 7)
fit8$AIC
covid.ts <- covid600.ts
covid.ts <- ts(diff(covid_total)) # 建立每日確診數的時間數列
covid600.ts <- ts(diff(covid_total)[1:600])
#do seasonal differencing first
sd_covid600.ts <- diff(covid600.ts, 7)
plot(sd_covid600.ts)
adf.test(sd_covid600.ts) #p-value = 0.01, stationary
acf2(sd_covid600.ts)#it seems need to take first difference
#first-difference
sdd_covid600.ts <- diff(sd_covid600.ts)
plot(sdd_covid.ts, type = "l")
plot(sdd_covid600.ts, type = "l")
acf2(sdd_covid600.ts)
plot(sd_covid600.ts)
acf2(sd_covid600.ts)#it seems need to take first difference
#first-difference
sdd_covid600.ts <- diff(sd_covid600.ts)
plot(sdd_covid600.ts, type = "l")
acf2(sdd_covid600.ts)
fitt1 <- sarima(covid600.ts, 0, 1, 1, 0, 1, 1, 7)
fitt2 <- sarima(covid600.ts, 0, 1, 1, 0, 1, 2, 7)
#aic_value_to(all, first 600)
fitt1$AIC #26.07277
fitt2$AIC #26.06357
acf2(sdd_covid600.ts)
fitt3 <- sarima(covid600.ts, 0, 1, 4, 0, 1, 2, 7)
fitt3$AIC
acf2(sdd_covid600.ts)
fitt3 <- sarima(covid600.ts, 4, 1, 1, 0, 1, 2, 7)
fitt3$AIC #26.06554
fitt3 <- sarima(covid600.ts, 3, 1, 1, 0, 1, 2, 7)
fitt3$AIC #26.06554
acf2(sdd_covid.ts)
acf2(sd_covid.ts)#it seems need to take first difference
acf2(sdd_covid.ts)
acf2(sdd_covid600.ts)
